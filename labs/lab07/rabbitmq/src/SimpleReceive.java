import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;
import java.nio.charset.StandardCharsets;

// Needed libraries:
// https://repo1.maven.org/maven2/com/rabbitmq/amqp-client/5.16.0/amqp-client-5.16.0.jar
// https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
// https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/1.7.36/slf4j-simple-1.7.36.jar

// Java client API - https://rabbitmq.github.io/rabbitmq-java-client/api/current/
public class SimpleReceive {
    private final static String QUEUE_NAME = "dsvwork";

    private static void doWork(String task) throws InterruptedException {
        for (char ch: task.toCharArray()) {
            if (ch != ' ') Thread.sleep(1000);
        }
    }

    public static void main(String[] argv) throws Exception {
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost");
        factory.setPort(5672);
//        factory.setUsername();
//        factory.setPassword();

        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        // create queue - idempotent operation
        // name (autogenerated), durable (false), exclusive (true), autoDelete (true), Map_of_other_properties
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);
        System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

        // Default dispatch of messages is done when it arrives in the queue (round-robin)
        //int prefetchCount = 1;
        //channel.basicQos(prefetchCount);

        DeliverCallback deliverCallback = (consumerTag, delivery) -> {
            String message = new String(delivery.getBody(), StandardCharsets.UTF_8);
            System.out.println(" [x] Received and working on '" + message + "'");
            try {
                doWork(message);
            } catch (InterruptedException ie) {
                System.out.println(" [x] Interrupted ...");
            } finally {
                System.out.println(" [x] Done");
                // deliveryTag, multiple (0 - only one, 1 - all up to this one)
                //channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false);
            }
        };
        boolean autoAck = true; // automatically ack after getting message from queue
        channel.basicConsume(QUEUE_NAME, autoAck, deliverCallback, consumerTag -> { });
    }
}