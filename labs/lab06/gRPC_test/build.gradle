plugins {
    // Provide convenience executables for trying out the examples. Also includes java plugin.
    // https://docs.gradle.org/current/userguide/application_plugin.html
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    // https://github.com/google/protobuf-gradle-plugin
    id 'com.google.protobuf' version '0.8.17'
    // Generate IntelliJ IDEA's .idea & .iml project files
    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'
}

// https://docs.gradle.org/current/userguide/declaring_repositories.html
repositories {
    mavenCentral()
    mavenLocal()
}

// variable definitions
def grpcVersion = '1.42.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.17.2'
def protocVersion = protobufVersion

// https://docs.gradle.org/current/userguide/declaring_dependencies.html
dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    //compileOnly "javax.annotation:javax.annotation-api:1.2"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
}

// Protobuf plugin configuration
// // https://github.com/google/protobuf-gradle-plugin
protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSet.html
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

sourceCompatibility = 1.7   // Java version compatibility to use when compiling Java source.
targetCompatibility = 1.7   // Java version to generate classes for.

// Disabling Application plugin task.
// Creates OS specific scripts to run the project as a JVM application.
startScripts.enabled = false

task dsvCalcServer(type: CreateStartScripts) {
    mainClassName = 'cz.ctu.fee.dsv.DSVCalcServer'
    applicationName = 'dsv-calc-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task dsvCalcClient(type: CreateStartScripts) {
    mainClassName = 'cz.ctu.fee.dsv.DSVCalcClient'
    applicationName = 'dsv-calc-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(dsvCalcServer)
    from(dsvCalcClient)
    fileMode = 0755
}

// ./gradlew tasks
// ./gradlew idea
// ./gradlew classes
// ./gradlew installDist
